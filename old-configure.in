dnl -*- Mode: Autoconf; tab-width: 4; indent-tabs-mode: nil; -*-
dnl vi: set tabstop=4 shiftwidth=4 expandtab syntax=m4:
dnl This Source Code Form is subject to the terms of the Mozilla Public
dnl License, v. 2.0. If a copy of the MPL was not distributed with this
dnl file, You can obtain one at http://mozilla.org/MPL/2.0/.

dnl Process this file with autoconf to produce a configure script.
dnl ========================================================
AC_PREREQ(2.13)
AC_INIT(config/config.mk)
AC_CONFIG_AUX_DIR(${srcdir}/build/autoconf)
AC_CANONICAL_SYSTEM

dnl ========================================================
dnl =
dnl = Don't change the following lines. Doing so breaks:
dnl =
dnl = CFLAGS="-foo" ./configure
dnl =
dnl ========================================================
CFLAGS="${CFLAGS=}"
CPPFLAGS="${CPPFLAGS=}"
CXXFLAGS="${CXXFLAGS=}"
LDFLAGS="${LDFLAGS=}"
HOST_CFLAGS="${HOST_CFLAGS=}"
HOST_CXXFLAGS="${HOST_CXXFLAGS=}"
HOST_LDFLAGS="${HOST_LDFLAGS=}"


dnl Propagate extra android flags
dnl =============================
case "$target" in
*-android*|*-linuxandroid*)
    LDFLAGS="$ANDROID_LDFLAGS $LDFLAGS"
    CFLAGS="$ANDROID_CFLAGS $CFLAGS"
    CXXFLAGS="$ANDROID_CXXFLAGS $CXXFLAGS"
    ASFLAGS="$ANDROID_ASFLAGS -DANDROID $ASFLAGS"
    ;;
esac


dnl Set the minimum version of toolkit libs used by mozilla
dnl ========================================================
W32API_VERSION=3.14


LDFLAGS="$LDFLAGS $LINKER_LDFLAGS $PACK_REL_RELOC_FLAGS"
HOST_LDFLAGS="$HOST_LDFLAGS $HOST_LINKER_LDFLAGS"

dnl ========================================================
dnl Checks for compilers.
dnl ========================================================

if test "$COMPILE_ENVIRONMENT"; then

# This prevents mingw from adding .exe when generating executable. Internal use
# only.
ac_exeext=.out

if test "$target" != "$host"; then
    MOZ_CROSS_COMPILER
else
    AC_PROG_CC
    case "$target" in
    *-mingw*)
      # Work around the conftest.exe access problem on Windows
      sleep 2
    esac
    AC_PROG_CXX
fi

dnl ========================================================
dnl Special win32 checks
dnl ========================================================

WINVER=0A00

case "$target" in
*-mingw*)
    if test "$CC_TYPE" = clang-cl; then
        # Check to see if we are really running in a msvc environemnt
        _WIN32_MSVC=1

        # Make sure compilers are valid
        CXXFLAGS="$CXXFLAGS -TP"
        AC_LANG_SAVE
        AC_LANG_C
        AC_TRY_COMPILE([#include <stdio.h>],
            [ printf("Hello World\n"); ],,
            AC_MSG_ERROR([\$(CC) test failed.  You must have MS VC++ in your path to build.]) )

        AC_LANG_CPLUSPLUS
        AC_TRY_COMPILE([#include <new.h>],
            [ unsigned *test = new unsigned(42); ],,
            AC_MSG_ERROR([\$(CXX) test failed.  You must have MS VC++ in your path to build.]) )
        AC_LANG_RESTORE

        AC_DEFINE(_CRT_SECURE_NO_WARNINGS)
        AC_DEFINE(_CRT_NONSTDC_NO_WARNINGS)

        MSVC_C_RUNTIME_DLL=vcruntime140.dll
        if test "$TARGET_CPU" != "x86"; then
            MSVC_C_RUNTIME_1_DLL=vcruntime140_1.dll
        fi
        MSVC_CXX_RUNTIME_DLL=msvcp140.dll

        # -Zc:sizedDealloc- disables C++14 global sized deallocation (see bug 1160146)
        CXXFLAGS="$CXXFLAGS -Zc:sizedDealloc-"

        AC_SUBST(MSVC_C_RUNTIME_DLL)
        AC_SUBST(MSVC_C_RUNTIME_1_DLL)
        AC_SUBST(MSVC_CXX_RUNTIME_DLL)

        AC_DEFINE(HAVE_SEH_EXCEPTIONS)
    else
        # Check w32api version
        _W32API_MAJOR_VERSION=`echo $W32API_VERSION | $AWK -F\. '{ print $1 }'`
        _W32API_MINOR_VERSION=`echo $W32API_VERSION | $AWK -F\. '{ print $2 }'`
        AC_MSG_CHECKING([for w32api version >= $W32API_VERSION])
        AC_TRY_COMPILE([#include <w32api.h>],
            #if (__W32API_MAJOR_VERSION < $_W32API_MAJOR_VERSION) || \
                (__W32API_MAJOR_VERSION == $_W32API_MAJOR_VERSION && \
                 __W32API_MINOR_VERSION < $_W32API_MINOR_VERSION)
                #error "test failed."
            #endif
            , [ res=yes ], [ res=no ])
        AC_MSG_RESULT([$res])
        if test "$res" != "yes"; then
            AC_MSG_ERROR([w32api version $W32API_VERSION or higher required.])
        fi
        # strsafe.h on mingw uses macros for function deprecation that pollutes namespace
        # causing problems with local implementations with the same name.
        AC_DEFINE(STRSAFE_NO_DEPRECATE)
    fi

    AC_DEFINE(_USE_MATH_DEFINES) # Otherwise Windows' math.h doesn't #define M_PI.

    CFLAGS="$CFLAGS -D_HAS_EXCEPTIONS=0"
    CXXFLAGS="$CXXFLAGS -D_HAS_EXCEPTIONS=0"

    AC_DEFINE_UNQUOTED(WINVER,0x$WINVER)
    AC_DEFINE_UNQUOTED(_WIN32_WINNT,0x$WINVER)
    AC_DEFINE_UNQUOTED(_WIN32_IE,0x0A00)

    ;;
esac

if test -n "$_WIN32_MSVC"; then
    # Since we're skipping compiler and library checks, hard-code
    # some facts here.
    AC_DEFINE(HAVE_IO_H)
fi

fi # COMPILE_ENVIRONMENT

dnl Configure platform-specific CPU architecture compiler options.
dnl ==============================================================
if test "$COMPILE_ENVIRONMENT"; then
    MOZ_ARCH_OPTS
fi # COMPILE_ENVIRONMENT

dnl ========================================================
dnl GNU specific defaults
dnl ========================================================
if test "$CC_TYPE" != clang-cl; then

    _DEFINES_CFLAGS="-include $_objdir/mozilla-config.h -DMOZILLA_CLIENT"

    ASFLAGS="$ASFLAGS $_DEFINES_CFLAGS"
fi

if test "$CC_TYPE" != clang-cl ; then
    _DEFINES_CXXFLAGS="-DMOZILLA_CLIENT -include $_objdir/mozilla-config.h"
fi

dnl ========================================================
dnl System overrides of the defaults for host
dnl ========================================================
case "$host" in
*mingw*)
    if test "$HOST_CC_TYPE" = clang-cl; then
        HOST_CFLAGS="$HOST_CFLAGS"
    else
        HOST_CFLAGS="$HOST_CFLAGS -mwindows"
    fi
    HOST_CFLAGS="$HOST_CFLAGS -DXP_WIN -DWIN32 -D_WIN32 -D_CRT_SECURE_NO_WARNINGS"
    HOST_OPTIMIZE_FLAGS="${HOST_OPTIMIZE_FLAGS=-O2}"
    HOST_BIN_SUFFIX=.exe

    case "${host_cpu}" in
    i*86)
        if test "$HOST_CC_TYPE" = clang-cl; then
            HOST_LDFLAGS="$HOST_LDFLAGS -MACHINE:X86"
        fi
        ;;
    x86_64)
        if test "$HOST_CC_TYPE" = clang-cl; then
            HOST_LDFLAGS="$HOST_LDFLAGS -MACHINE:X64"
        fi
        HOST_CFLAGS="$HOST_CFLAGS -D_AMD64_"
        ;;
    esac
    ;;

*-darwin*)
    HOST_CFLAGS="$HOST_CFLAGS -DXP_UNIX -DXP_MACOSX"
    HOST_OPTIMIZE_FLAGS="${HOST_OPTIMIZE_FLAGS=-O3}"
    ;;

*-linux*|*-kfreebsd*-gnu|*-gnu*)
    HOST_CFLAGS="$HOST_CFLAGS -DXP_UNIX"
    HOST_OPTIMIZE_FLAGS="${HOST_OPTIMIZE_FLAGS=-O3}"
    ;;

*)
    HOST_CFLAGS="$HOST_CFLAGS -DXP_UNIX"
    HOST_OPTIMIZE_FLAGS="${HOST_OPTIMIZE_FLAGS=-O2}"
    ;;
esac

dnl ========================================================
dnl System overrides of the defaults for target
dnl ========================================================

MOZ_OPTIMIZE_LDFLAGS="${_COMPILATION_OPTIMIZE_LDFLAGS} ${MOZ_OPTIMIZE_FLAGS}"

case "$target" in
*-darwin*)
    MOZ_OPTIMIZE_FLAGS="-O3"
    ;;

*-android*|*-linuxandroid*)
    MOZ_OPTIMIZE_FLAGS="-O2"
    ;;

*-*linux*)
    if test "$CC_TYPE" != clang-cl ; then
        MOZ_PGO_OPTIMIZE_FLAGS="-O3"
        MOZ_OPTIMIZE_FLAGS="-O2"
    fi

    case "${target_cpu}" in
    alpha*)
        CFLAGS="$CFLAGS -mieee"
        CXXFLAGS="$CXXFLAGS -mieee"
    ;;
    esac
    ;;
*-mingw*)
    # certain versions of cygwin's makedepend barf on the
    # #include <string> vs -I./dist/include/string issue so don't use it
    if test "$CC_TYPE" != clang-cl ; then
        # != clang-cl will match gcc and clang
        if test "$CC_TYPE" = gcc; then
            AC_MSG_ERROR(Firefox cannot be built with mingw-gcc and requires a mingw-clang toolchain to work)
        fi

        MOZ_OPTIMIZE_FLAGS="-O2"

        WIN32_CONSOLE_EXE_LDFLAGS=-mconsole
        WIN32_GUI_EXE_LDFLAGS=-mwindows

        # Silence problematic clang warnings
        CXXFLAGS="$CXXFLAGS -Wno-incompatible-ms-struct"
        LDFLAGS="$LDFLAGS -Wl,--no-insert-timestamp"
    else
        WIN32_SUBSYSTEM_VERSION=10.0
        WIN32_CONSOLE_EXE_LDFLAGS=-SUBSYSTEM:CONSOLE,$WIN32_SUBSYSTEM_VERSION
        WIN32_GUI_EXE_LDFLAGS=-SUBSYSTEM:WINDOWS,$WIN32_SUBSYSTEM_VERSION
        _DEFINES_CFLAGS="-FI $_objdir/mozilla-config.h -DMOZILLA_CLIENT"
        _DEFINES_CXXFLAGS="-FI $_objdir/mozilla-config.h -DMOZILLA_CLIENT"
        CFLAGS="$CFLAGS -Gy -Zc:inline"
        CXXFLAGS="$CXXFLAGS -Gy -Zc:inline"
        if test "$TARGET_CPU" = "x86"; then
            dnl VS2012+ defaults to -arch:SSE2. We want to target nothing
            dnl more recent, so set that explicitly here unless another
            dnl target arch has already been set.
            changequote(,)
            if test -z `echo $CFLAGS | grep -i [-/]arch:`; then
              CFLAGS="$CFLAGS -arch:SSE2"
            fi
            if test -z `echo $CXXFLAGS | grep -i [-/]arch:`; then
              CXXFLAGS="$CXXFLAGS -arch:SSE2"
            fi
            changequote([,])
        fi
        dnl VS2013+ supports -Gw for better linker optimizations.
        dnl http://blogs.msdn.com/b/vcblog/archive/2013/09/11/introducing-gw-compiler-switch.aspx
        dnl Disabled on ASan because it causes false-positive ODR violations.
        if test -z "$MOZ_ASAN"; then
            CFLAGS="$CFLAGS -Gw"
            CXXFLAGS="$CXXFLAGS -Gw"
        else
            # String tail merging doesn't play nice with ASan's ODR checker.
            LDFLAGS="$LDFLAGS -opt:nolldtailmerge"
        fi
        # Silence VS2017 15.5+ TR1 deprecation warnings hit by older gtest versions
        CXXFLAGS="$CXXFLAGS -D_SILENCE_TR1_NAMESPACE_DEPRECATION_WARNING"
        MOZ_DEBUG_LDFLAGS='-DEBUG'
        if test "$HOST_OS_ARCH" != "WINNT"; then
          # %_PDB% is a special signal to emit only the PDB basename. This
          # avoids problems in Windows tools that don't like forward-slashes.
          MOZ_DEBUG_LDFLAGS="$MOZ_DEBUG_LDFLAGS -PDBALTPATH:%_PDB%"
        fi
        MOZ_OPTIMIZE_FLAGS='-O2'
        LDFLAGS="$LDFLAGS -LARGEADDRESSAWARE"
    fi
    AC_DEFINE(WIN32_LEAN_AND_MEAN)
    dnl See http://support.microsoft.com/kb/143208 to use STL
    AC_DEFINE(NOMINMAX)
    BIN_SUFFIX='.exe'

    case "$host_os" in
    cygwin*|msvc*|mks*)
        AC_MSG_ERROR([Using a Cygwin build environment is unsupported. Configure cannot check for presence of necessary headers. Please upgrade to MozillaBuild; see https://developer.mozilla.org/en/Windows_Build_Prerequisites.])
        ;;
    esac

    case "$target" in
    i*86-*)
        if test "$CC_TYPE" != clang-cl ; then
            CFLAGS="$CFLAGS -mstackrealign"
            CXXFLAGS="$CXXFLAGS -mstackrealign"
            LDFLAGS="$LDFLAGS -Wl,--large-address-aware"
        else
            LDFLAGS="$LDFLAGS -SAFESEH"
        fi

        AC_DEFINE(_X86_)
        ;;
    x86_64-*)
        AC_DEFINE(_AMD64_)
        ;;
    aarch64-*)
        AC_DEFINE(_ARM64_)
        ;;
    *)
        AC_DEFINE(_CPU_ARCH_NOT_DEFINED)
        ;;
    esac
    ;;

*-netbsd*)
    CFLAGS="$CFLAGS -Dunix"
    CXXFLAGS="$CXXFLAGS -Dunix"
    if $CC -E - -dM </dev/null | grep __ELF__ >/dev/null; then
        MOZ_PROGRAM_LDFLAGS="$MOZ_PROGRAM_LDFLAGS -Wl,--export-dynamic"
    fi
    ;;

esac

if test -z "$MOZ_OPTIMIZE_FLAGS"; then
    MOZ_OPTIMIZE_FLAGS="-O"
fi


if test -n "$COMPILE_ENVIRONMENT"; then
    MOZ_COMPILER_OPTS
fi

dnl Mozilla specific options
dnl ========================================================
dnl The macros used for command line options
dnl are defined in build/autoconf/altoptions.m4.

dnl ========================================================
dnl =
dnl = Application
dnl =
dnl ========================================================

MOZ_BRANDING_DIRECTORY=
MOZ_OFFICIAL_BRANDING=

dnl ========================================================
dnl = Trademarked Branding
dnl ========================================================
MOZ_ARG_ENABLE_BOOL(official-branding,
[  --enable-official-branding
                          Enable Official mozilla.org Branding
                          Do not distribute builds with
                          --enable-official-branding unless you have
                          permission to use trademarks per
                          http://www.mozilla.org/foundation/trademarks/ .],
    MOZ_OFFICIAL_BRANDING=1,
    MOZ_OFFICIAL_BRANDING=)

# Allow the application to influence configure with a confvars.sh script.
AC_MSG_CHECKING([if app-specific confvars.sh exists])
if test -f "${srcdir}/${MOZ_BUILD_APP}/confvars.sh" ; then
  AC_MSG_RESULT([${srcdir}/${MOZ_BUILD_APP}/confvars.sh])
  . "${srcdir}/${MOZ_BUILD_APP}/confvars.sh"
else
  AC_MSG_RESULT([no])
fi

AC_SUBST(MOZ_OFFICIAL_BRANDING)
if test -n "$MOZ_OFFICIAL_BRANDING"; then
  if test -z "$MOZ_OFFICIAL_BRANDING_DIRECTORY"; then
    AC_MSG_ERROR([You must specify MOZ_OFFICIAL_BRANDING_DIRECTORY to use --enable-official-branding.])
  else
    MOZ_BRANDING_DIRECTORY=${MOZ_OFFICIAL_BRANDING_DIRECTORY}
    AC_DEFINE(MOZ_OFFICIAL_BRANDING)
  fi
fi

MOZ_ARG_WITH_STRING(branding,
[  --with-branding=dir     Use branding from the specified directory.],
    MOZ_BRANDING_DIRECTORY=$withval)

REAL_BRANDING_DIRECTORY="${MOZ_BRANDING_DIRECTORY}"
if test -z "$REAL_BRANDING_DIRECTORY"; then
  REAL_BRANDING_DIRECTORY=${MOZ_BUILD_APP}/branding/nightly
fi

if test -f "${_topsrcdir}/$REAL_BRANDING_DIRECTORY/configure.sh"; then
  . "${_topsrcdir}/$REAL_BRANDING_DIRECTORY/configure.sh"
fi

AC_SUBST(MOZ_BRANDING_DIRECTORY)

dnl ========================================================
dnl = Enable code optimization. ON by default.
dnl ========================================================

# Use value from moz.configure if one is defined. Else use our computed
# value.
if test -n "${MOZ_CONFIGURE_OPTIMIZE_FLAGS}"; then
    MOZ_OPTIMIZE_FLAGS=${MOZ_CONFIGURE_OPTIMIZE_FLAGS}
fi

if test "$COMPILE_ENVIRONMENT"; then
if test -n "$MOZ_OPTIMIZE"; then
    AC_MSG_CHECKING([for valid C compiler optimization flags])
    _SAVE_CFLAGS=$CFLAGS
    CFLAGS="$CFLAGS $MOZ_OPTIMIZE_FLAGS"
    AC_TRY_COMPILE([#include <stdio.h>],
        [printf("Hello World\n");],
        _results=yes,
        _results=no)
    AC_MSG_RESULT([$_results])
    if test "$_results" = "no"; then
        AC_MSG_ERROR([These compiler flags for C are invalid: $MOZ_OPTIMIZE_FLAGS])
    fi
    CFLAGS=$_SAVE_CFLAGS
    if test -n "$MOZ_LTO" -a "$CC_TYPE" = clang ; then
        # When using llvm-based LTO, non numeric optimization levels are
        # not supported by the linker, so force the linker to use -O2 (
        # which doesn't influence the level compilation units are actually
        # compiled at).
        case " $MOZ_OPTIMIZE_FLAGS " in
        *\ -Os\ *|*\ -Oz\ *)
            MOZ_OPTIMIZE_LDFLAGS="$MOZ_OPTIMIZE_LDFLAGS -O2"
            ;;
        esac
    fi
fi
fi # COMPILE_ENVIRONMENT

AC_SUBST_LIST(MOZ_OPTIMIZE_FLAGS)
AC_SUBST_LIST(MOZ_OPTIMIZE_LDFLAGS)
AC_SUBST_LIST(MOZ_PGO_OPTIMIZE_FLAGS)

case "${OS_TARGET}" in
Android|WINNT|Darwin)
  MOZ_GLUE_IN_PROGRAM=
  ;;
*)
  dnl On !Android !Windows !OSX, we only want to link executables against mozglue
  MOZ_GLUE_IN_PROGRAM=1
  AC_DEFINE(MOZ_GLUE_IN_PROGRAM)
  ;;
esac
AC_SUBST(MOZ_GLUE_IN_PROGRAM)

dnl ========================================================
dnl = Enable using the clang plugin to build
dnl ========================================================

if test -n "$COMPILE_ENVIRONMENT"; then
MOZ_CONFIG_CLANG_PLUGIN
fi # COMPILE_ENVIRONMENT

AC_LANG_C

dnl ========================================================
dnl =
dnl = Maintainer debug option (no --enable equivalent)
dnl =
dnl ========================================================

AC_SUBST_LIST(ASFLAGS)
AC_SUBST_LIST(MOZ_DEBUG_LDFLAGS)

dnl ========================================================
dnl = Mac bundle name
dnl ========================================================

MOZ_MACBUNDLE_NAME=$MOZ_APP_DISPLAYNAME
if test "$MOZ_MACBUNDLE_NAME_PREFIX"; then
  MOZ_MACBUNDLE_NAME="${MOZ_MACBUNDLE_NAME_PREFIX}${MOZ_MACBUNDLE_NAME}"
fi

if test "$MOZ_DEBUG"; then
  MOZ_MACBUNDLE_NAME="${MOZ_MACBUNDLE_NAME}Debug.app"
else
  MOZ_MACBUNDLE_NAME=${MOZ_MACBUNDLE_NAME}.app
fi
AC_SUBST(MOZ_MACBUNDLE_NAME)

dnl Mac bundle identifier (based on MOZ_APP_DISPLAYNAME)
# If the MOZ_MACBUNDLE_ID is defined in the configure.sh, use it
# Otherwise, use MOZ_APP_DISPLAYNAME
if test -z "$MOZ_MACBUNDLE_ID"; then
   MOZ_MACBUNDLE_ID=`echo $MOZ_APP_DISPLAYNAME | tr 'A-Z' 'a-z' | tr -dc 'a-z-'`
fi
MOZ_MACBUNDLE_ID=${MOZ_DISTRIBUTION_ID}.${MOZ_MACBUNDLE_ID}
if test "$MOZ_DEBUG"; then
  MOZ_MACBUNDLE_ID=${MOZ_MACBUNDLE_ID}debug
fi

AC_DEFINE_UNQUOTED(MOZ_MACBUNDLE_ID,$MOZ_MACBUNDLE_ID)
AC_SUBST(MOZ_MACBUNDLE_ID)

dnl ========================================================
dnl = Child Process Name for IPC
dnl ========================================================
MOZ_CHILD_PROCESS_APPNAME="${MOZ_APP_DISPLAYNAME}CP"

AC_SUBST(MOZ_CHILD_PROCESS_APPNAME)

dnl ==========================================================
dnl = Mac Media Plugin Helper (GMP Child) Process Name for IPC
dnl ==========================================================
MOZ_EME_PROCESS_NAME="media-plugin-helper"
MOZ_EME_PROCESS_NAME_BRANDED="$MOZ_APP_DISPLAYNAME Media Plugin Helper"
MOZ_EME_PROCESS_BUNDLENAME="${MOZ_EME_PROCESS_NAME}.app"
# Generate a lower case string with no spaces to be used as the bundle ID
# for the EME helper .app of the form org.mozilla.<executable-name>.
MOZ_EME_PROCESS_BUNDLEID=`echo "$MOZ_APP_DISPLAYNAME" | tr ' ' '-'`
MOZ_EME_PROCESS_BUNDLEID=`echo "$MOZ_EME_PROCESS_BUNDLEID" | tr 'A-Z' 'a-z'`
MOZ_EME_PROCESS_BUNDLEID=${MOZ_EME_PROCESS_BUNDLEID}-${MOZ_EME_PROCESS_NAME}
MOZ_EME_PROCESS_BUNDLEID=${MOZ_DISTRIBUTION_ID}.${MOZ_EME_PROCESS_BUNDLEID}

AC_SUBST(MOZ_EME_PROCESS_NAME)
AC_SUBST(MOZ_EME_PROCESS_NAME_BRANDED)
AC_SUBST(MOZ_EME_PROCESS_BUNDLENAME)
AC_SUBST(MOZ_EME_PROCESS_BUNDLEID)

# The following variables are available to branding and application
# configuration ($BRANDING/configure.sh and $APPLICATION/confvars.sh):
# - MOZ_APP_DISPLAYNAME: Used in user-visible fields (DLL properties,
# Mac Bundle name, Updater, Installer), it is typically used for nightly
# builds (e.g. Aurora for Firefox).
# - MOZ_APP_PROFILE: When set, used for application.ini's
# "Profile" field, which controls profile location.

# The following environment variables used to have an effect, but don't anymore:
# - MOZ_APP_VERSION: Defines the application version number. This was replaced with
# the contents from the version.txt file in the application directory, or
# browser/config/version.txt if there isn't one.
# - MOZ_APP_VERSION_DISPLAY: Defines the application version number. Used
# in the "About" window. This was replaced with the contents from the
# version_display.txt or version.txt in the application directory, or
# browser/config/version_display.txt.

# For extensions and langpacks, we require a max version that is compatible
# across security releases. MOZ_APP_MAXVERSION is our method for doing that.
# 24.0a1 and 24.0a2 aren't affected
# 24.0 becomes 24.*
# 24.1.1 becomes 24.*
IS_ALPHA=`echo $MOZ_APP_VERSION | grep a`
if test -z "$IS_ALPHA"; then
  changequote(,)
  if test "$(basename $MOZ_BUILD_APP)" = "suite"; then
    MOZ_APP_MAXVERSION=`echo $MOZ_APP_VERSION | sed "s|\(^[0-9]*\.[0-9]*\).*|\1|"`.*
  else
    MOZ_APP_MAXVERSION=`echo $MOZ_APP_VERSION | sed "s|\(^[0-9]*\).*|\1|"`.*
  fi
  changequote([,])
else
  MOZ_APP_MAXVERSION=$MOZ_APP_VERSION
fi

AC_SUBST(MOZ_APP_DISPLAYNAME)
AC_SUBST(MOZ_APP_PROFILE)
AC_SUBST(MAR_CHANNEL_ID)
AC_SUBST(ACCEPTED_MAR_CHANNEL_IDS)
AC_DEFINE_UNQUOTED(MOZ_APP_UA_VERSION, "$MOZ_APP_VERSION")

AC_SUBST(MOZ_APP_MAXVERSION)

dnl Echo the CFLAGS to remove extra whitespace.
CFLAGS=`echo \
    $_COMPILATION_CFLAGS \
    $CFLAGS`

CXXFLAGS=`echo \
    $_COMPILATION_CXXFLAGS \
    $CXXFLAGS`

ASFLAGS=`echo \
    $_COMPILATION_ASFLAGS \
    $ASFLAGS`

COMPILE_CFLAGS=`echo \
    $_DEFINES_CFLAGS \
    $COMPILE_CFLAGS`

COMPILE_CXXFLAGS=`echo \
    $_DEFINES_CXXFLAGS \
    $COMPILE_CXXFLAGS`

HOST_CFLAGS=`echo \
    $_COMPILATION_HOST_CFLAGS \
    $HOST_CFLAGS`

HOST_CXXFLAGS=`echo \
    $_COMPILATION_HOST_CXXFLAGS \
    $HOST_CXXFLAGS`

LDFLAGS=`echo \
    $LDFLAGS \
    $_COMPILATION_LDFLAGS`

HOST_LDFLAGS=`echo \
    $HOST_LDFLAGS \
    $_COMPILATION_HOST_LDFLAGS`

OS_CFLAGS="$CFLAGS"
OS_CXXFLAGS="$CXXFLAGS"
OS_CPPFLAGS="$CPPFLAGS"
OS_COMPILE_CFLAGS="$COMPILE_CFLAGS"
OS_COMPILE_CXXFLAGS="$COMPILE_CXXFLAGS"
OS_LDFLAGS="$LDFLAGS"
OS_LIBS="$LIBS"
AC_SUBST_LIST(OS_CFLAGS)
AC_SUBST_LIST(OS_CXXFLAGS)
AC_SUBST_LIST(OS_CPPFLAGS)
AC_SUBST_LIST(OS_COMPILE_CFLAGS)
AC_SUBST_LIST(OS_COMPILE_CXXFLAGS)
AC_SUBST_LIST(OS_LDFLAGS)
AC_SUBST(OS_LIBS)

AC_SUBST(HOST_CC)
AC_SUBST(HOST_CXX)
AC_SUBST_LIST(HOST_CFLAGS)
AC_SUBST_LIST(HOST_CPPFLAGS)
AC_SUBST_LIST(HOST_CXXFLAGS)
AC_SUBST(HOST_LDFLAGS)
AC_SUBST_LIST(HOST_OPTIMIZE_FLAGS)
AC_SUBST(HOST_BIN_SUFFIX)

AC_SUBST(BIN_SUFFIX)
AC_SUBST(WIN32_CONSOLE_EXE_LDFLAGS)
AC_SUBST(WIN32_GUI_EXE_LDFLAGS)

dnl Set various defines and substitutions
dnl ========================================================

AC_SUBST(MOZ_DEV_EDITION)
if test -n "$MOZ_DEV_EDITION"; then
    AC_DEFINE(MOZ_DEV_EDITION)
fi

dnl Spit out some output
dnl ========================================================

MOZ_CREATE_CONFIG_STATUS()

rm -fr confdefs* $ac_clean_files
