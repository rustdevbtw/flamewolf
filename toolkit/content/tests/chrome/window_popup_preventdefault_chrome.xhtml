<?xml version="1.0"?>
<?xml-stylesheet href="chrome://global/skin" type="text/css"?>

<window title="Popup Prevent Default Tests"
        xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">

<!--
  This tests checks that preventDefault can be called on a popupshowing
  event or popuphiding event to prevent the default behaviour.
  -->

<script>

var gBlockShowing = true;
var gBlockHiding = true;
var gShownNotAllowed = true;
var gHiddenNotAllowed = true;

var fm = Services.focus;

var is = function(l, r, v) { window.arguments[0].SimpleTest.is(l, r, v); }
var isnot = function(l, r, v) { window.arguments[0].SimpleTest.isnot(l, r, v); }

const {BrowserTestUtils} = ChromeUtils.importESModule(
  "resource://testing-common/BrowserTestUtils.sys.mjs"
);

async function runTest()
{
  var menu = document.getElementById("menu");

  is(fm.activeWindow, window, "active window at start");
  is(fm.focusedWindow, window, "focused window at start");

  is(window.windowState, window.STATE_NORMAL, "window is normal");
  // the minimizing test sometimes fails on Linux so don't test it there
  if (navigator.platform.indexOf("Lin") == 0) {
    menu.open = true;
    return;
  }
  let promiseSizeModeChange = BrowserTestUtils.waitForEvent(
    window,
    "sizemodechange"
  );
  window.minimize();
  await promiseSizeModeChange;
  is(window.windowState, window.STATE_MINIMIZED, "window is minimized");

  isnot(fm.activeWindow, window, "active window after minimize");
  isnot(fm.focusedWindow, window, "focused window after minimize");

  menu.open = true;

  setTimeout(runTestAfterMinimize, 0);
}

async function runTestAfterMinimize()
{
  var menu = document.getElementById("menu");
  is(menu.firstChild.state, "closed", "popup not opened when window minimized");

  let promiseSizeModeChange = BrowserTestUtils.waitForEvent(
    window,
    "sizemodechange"
  );
  window.restore();
  await promiseSizeModeChange;
  is(window.windowState, window.STATE_NORMAL, "window is restored");

  is(fm.activeWindow, window, "active window after restore");
  is(fm.focusedWindow, window, "focused window after restore");

  menu.open = true;
}

function popupShowing(event)
{
  if (gBlockShowing) {
    event.preventDefault();
    gBlockShowing = false;
    setTimeout(function() {
                 gShownNotAllowed = false;
                 document.getElementById("menu").open = true;
               }, 3000, true);
  }
}

function popupShown()
{
  window.arguments[0].SimpleTest.ok(!gShownNotAllowed, "popupshowing preventDefault");
  document.getElementById("menu").open = false;
}

function popupHiding(event)
{
  if (gBlockHiding) {
    event.preventDefault();
    gBlockHiding = false;
    setTimeout(function() {
                 gHiddenNotAllowed = false;
                 document.getElementById("menu").open = false;
               }, 3000, true);
  }
}

function popupHidden()
{
  window.arguments[0].SimpleTest.ok(!gHiddenNotAllowed, "popuphiding preventDefault");
  window.arguments[0].SimpleTest.finish();
  window.close();
}

window.arguments[0].SimpleTest.waitForFocus(runTest, window);
</script>

<button id="menu" type="menu" label="Menu">
  <menupopup onpopupshowing="popupShowing(event);"
             onpopupshown="popupShown();"
             onpopuphiding="popupHiding(event);"
             onpopuphidden="popupHidden();">
    <menuitem label="Item"/>
  </menupopup>
</button>


</window>
